@startuml


title BabyPasBros - Class Diagram


class Game {
void  run();
void  processEvents();
void  update(sf::Time elapsedTime);
void  render();
void  initialize(...);
void  initTextures(...);
void  updateStatistics(sf::Time elapsedTime);	


map<string,const sf::Texture> textures;
int                                                           nbCercles;
vector<unique_ptr<Group>>   levels;
int                                                           curLevel;
vector<RoundTarget>                        mTargets;
}


class Main


class RoundTarget


class Entity {
explicit				Entity(const pugi::xml_node& node);
virtual void			setTexture(...) = 0;
virtual void			drawCurrent(sf::RenderWindow& window) const = 0;
virtual sf::Vector2f  	getPos() = 0 ;
virtual sf::Vector2f  	getSiz() = 0 ;
virtual void			update(...) = 0;
virtual void			collide(...) = 0;
virtual void			handlePlayerInput(...) = 0;
bool					getPhysicalState();

float         x;
float         y;
int           height;
int           width;
bool          physical;

}

class UnmovingEntity {
	explicit				UnmovingEntity(const pugi::xml_node& node);
	void					drawCurrent(sf::RenderWindow& window) const;
	sf::Vector2f			getPos() override;
	sf::Vector2f			getSiz() override;
	bool					isVertical() const;

	sf::RectangleShape	wShape;
	const bool			vertical;
}

class InteractiveUnmoving {
explicit				InteractiveUnmoving(const pugi::xml_node& node);
void					drawCurrent(sf::RenderWindow& window) const override;

sf::Sound			mSound;
bool				        isNear;
sf::RectangleShape	mText;
}


class Wall {
explicit        Wall(const pugi::xml_node& node);
	void					setTexture(...) override;
	void					setSoundBuffer(...) override;
	void					collide(...) override;
	void					update(...) override;
	void					handlePlayerInput(...) override;
}


class Door {
	explicit		Door(const pugi::xml_node& node);
	void			setTexture(...) override;
	void                setSoundBuffer(...) override;
	void			collide(...) override;
	void			update(...) override;
	void			handlePlayerInput(...) override;
}


class Player{
explicit              Player(float x, float y, int height, int width);
explicit              Player(const pugi::xml_node& node);
sf::Sprite          getSelf();
void                  dragTowards(sf::Vector2f targetPos);

float               PlayerSpeed;
float               acceleration;
float               maxGravity;
sf::Sprite          mChar;
sf::Vector2f    dragMovement;
bool                mIsMovingUp;
... //Down, Left, Right
bool                collideUp;
... //Down, Left, Right
bool                dragging;
}


class Group {
explicit  Group(const pugi::xml_node& node);
void       dragTowards(sf::Vector2f targetPos);
string    returnName() const;
string const                                windowName;
vector<unique_ptr<Entity>>  children;
unique_ptr<Player>                  mainCharacter;
unique_ptr<Pacifier>                pacifier;
}

class Pacifier {
	explicit		Pacifier(const pugi::xml_node& node);
	void			setTexture(...) override;
	void                setSoundBuffer(...) override;
	void			collide(...) override;
	void			update(...) override;
	void			handlePlayerInput(...) override;
	bool			passLevel() const;

	-bool				nextLevel;
}




Main *-- Game
Game "1" *-up- "*" RoundTarget
Game "1" *--- "*" Group
Entity <|-- UnmovingEntity
UnmovingEntity <|-- Wall
UnmovingEntity <|-- InteractiveUnmoving
Entity <|-- Player
Entity <|-- Group
InteractiveUnmoving <|-- Door
InteractiveUnmoving <|-- Pacifier
Group "1" *-- "*" Wall
Group "1" *-- "1" Player
Group "1" *-- "*" Door
Group "1" *-- "1" Pacifier
Group "1" *-- "*" Entity



@enduml